meta {
  name: Create
  type: http
  seq: 1
}

post {
  url: {{BASE_URL}}/filters
  body: json
  auth: none
}

headers {
  Content-Type: application/json
  Authorization: Bearer {{USER_JWT}}
}

body:json {
  {
      "OwnerId": "a84e09b6-339a-4340-a9bd-9567a17200ef",
      "TenantId": "{{TENANT_ID}}",
      "UserId": "{{USER_ID}}",
      "Name": "my-filter-b",
      "Description": "This is a filter to find user engagement of users beyond 10 days.",
      "Filters": {
          "sample_attribute": 3232
      },
      "Frequency" : "Per-day",
      "Duration" : "Last-week"
  }
}

tests {
  try {
      var jsonRes = res.getBody();
      bru.setEnvVar("FILTER_ID", jsonRes.Data.id);
  }
  catch (error) {
      console.log(error.message);
  }
  
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(201);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('Success');
  });
  
  test("Filter is created", function () {
      var jsonRes = res.getBody();
      expect(jsonRes.Data).to.have.property('id');
      expect(jsonRes.Data).to.have.property('Name');
      expect(jsonRes.Data).to.have.property('Description');
      expect(jsonRes.Data).to.have.property('OwnerId');
      expect(jsonRes.Data).to.have.property('UserId');
      expect(jsonRes.Data).to.have.property('TenantId');
      expect(jsonRes.Data).to.have.property('Filters');
  });
  
  
}
