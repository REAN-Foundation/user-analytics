meta {
  name: Create
  type: http
  seq: 1
}

post {
  url: {{BASE_URL}}/events
  body: json
  auth: none
}

headers {
  Content-Type: application/json
  x-api-key: {{API_KEY}}
}

body:json {
  {
      "UserId": "{{USER_ID}}",
      "TenantId": "{{TENANT_ID}}",
      "ResourceId": "54b7b09a-842b-42d2-a6ba-c3659aa748c7",
      "SessionId": null,
      "ResourceType": "Login-session",
      "ActionType": "User-Action",
      "ActionStatement": "User has logged in",
      "EventName": "user-login",
      "EventCategory": "Login",
      "Timestamp": "2024-11-20T13:41:49.985Z",
      "Attributes": {
          "systolic": 120,
          "diastolic": 80
      }
  }
}

tests {
  try {
      var jsonRes = res.getBody();
      bru.setEnvVar("EVENT_ID", jsonRes.Data.id);
  }
  catch (error) {
      console.log(error.message);
  }
  
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(201);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('Success');
  });
  
  test("Event is created", function () {
      var jsonRes = res.getBody();
      expect(jsonRes.Data).to.have.property('id');
      expect(jsonRes.Data).to.have.property('UserId');
      expect(jsonRes.Data).to.have.property('TenantId');
      expect(jsonRes.Data).to.have.property('ActionType');
      expect(jsonRes.Data).to.have.property('ActionStatement');
      expect(jsonRes.Data).to.have.property('EventCategory');
      expect(jsonRes.Data).to.have.property('EventName');
      expect(jsonRes.Data).to.have.property('ResourceId');
      expect(jsonRes.Data).to.have.property('SessionId');
      
  });
  
  
}
