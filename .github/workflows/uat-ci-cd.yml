name: UAT-CI-CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push events for the release branches, excluding release/aha branches
  push:
    branches:
      - 'release/**'
      - '!release/aha**'

jobs:
  CodeScan-ESLint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Lint Code Base
        uses: docker://ghcr.io/github/super-linter:latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LINTER_RULES_PATH: /
          TYPESCRIPT_ES_CONFIG_FILE: .eslintrc.json
          VALIDATE_TYPESCRIPT_ES: true
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: main

  Label_Checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Check labels
        if: ${{ github.event_name == 'pull_request' }}
        uses: docker://agilepathway/pull-request-label-checker:latest
        with:
          one_of: major,minor,patch
          repo_token: ${{ secrets.GITHUB_TOKEN }}

  Deploy-ECS:
    if: ${{ github.event_name == 'push' }}
    environment: uat
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Declare some variables
        id: vars
        shell: bash
        run: |
          echo "branch=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\\//-/g')" >> $GITHUB_OUTPUT
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "repo_name=$(echo \"$GITHUB_REPOSITORY\" | awk -F / '{print $2}')" >> $GITHUB_OUTPUT

      - name: Print Variables
        run: |
          echo "Branch: ${{ steps.vars.outputs.branch }}"
          echo "Sha: ${{ steps.vars.outputs.sha_short }}"
          echo "Repo: ${{ steps.vars.outputs.repo_name }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ steps.vars.outputs.branch }}-${{ steps.vars.outputs.sha_short }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Copy env file
        run: aws s3 cp s3://${{ secrets.ENV_FILE_BUCKET_PATH }}/.env ./.env

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/user-analytics-dev-uat:${{ steps.vars.outputs.branch }}_${{ steps.vars.outputs.sha_short }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Image Digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.TASK_DEFINITION_NAME }} \
          > task-definition.json

      - name: Update ECS task definition
        run: |
          sed -i 's|<IMAGE>|${{ steps.login-ecr.outputs.registry }}/user-analytics-dev-uat:${{ steps.vars.outputs.branch }}_${{ steps.vars.outputs.sha_short }}|' task-definition.json

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: task-definition.json
          service: ${{ secrets.SERVICE_NAME }}
          cluster: ${{ secrets.CLUSTER_NAME }}
          wait-for-service-stability: true

      - name: Update ECS Service
        run: |
          curl -X POST \
          -H "Authorization: Bearer ${{ secrets.DUPLOCLOUD_TOKEN }}" \
          -d '{"TaskDefinition":"${{ steps.docker_build.outputs.digest }}","Name":"${{ secrets.SERVICE_NAME }}","Replicas":1,"HealthCheckGracePeriodSeconds":1200,"DnsPrfx":""}' \
          'https://reanfoundation.duplocloud.net/subscriptions/${{ secrets.DUPLO_ID }}/UpdateEcsService'
