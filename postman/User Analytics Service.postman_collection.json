{
	"info": {
		"_postman_id": "a7aa76a8-a0c8-4705-b963-1700587bd00a",
		"name": "User Analytics Service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5510218",
		"_collection_link": "https://solar-water-153775.postman.co/workspace/ReanCare~dff1f95d-5219-4d23-8d2c-af292e5a25ae/collection/5510218-a7aa76a8-a0c8-4705-b963-1700587bd00a?action=share&source=collection_link&creator=5510218"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"USER_ID\", jsonRes.Data.Tenant.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"User is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('FirstName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('LastName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Phone');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
									"    \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{USER_ID}}\",\r\n    \"TenantId\": \"{{TENANT_ID}}\",\r\n    \"FirstName\": \"Kiran\",\r\n    \"LastName\": \"Kharade\",\r\n    \"Gender\": \"Male\",\r\n    \"Email\": \"kiran.kharade@inflectionzone.com\",\r\n    \"PhoneCode\": \"+91\",\r\n    \"Phone\": \"9900990099\",\r\n    \"LocationLongitude\": \"28.7041\",\r\n    \"LocationLatitude\": \"77.1025\",\r\n    \"LastActive\": \"2023-11-10T13:41:49.985Z\",\r\n    \"OnboardingSource\": \"Patient App\",\r\n    \"Role\": \"Patient\",\r\n    \"Attributes\": {\r\n        \"sample_attribute\": 3232\r\n    },\r\n    \"TimezoneOffsetMin\": 330,\r\n    \"RegistrationDate\": \"2023-11-17T13:41:49.985Z\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"User is retrieved\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('FirstName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('LastName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Phone');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/users/{{USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{USER_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"User is updated\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Role');\r",
									"    pm.expect(jsonRes.Data.Role).equals('Doctor');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"LocationLongitude\": \"28.0000\",\r\n    \"LocationLatitude\": \"77.0000\",\r\n    \"LastActive\": \"2023-11-10T00:00:00.000Z\",\r\n    \"OnboardingSource\": \"Doctor App\",\r\n    \"Role\": \"Doctor\",\r\n    \"Attributes\": {\r\n        \"sample_attribute_1\": 3333,\r\n        \"sample_attribute_2\": \"dfdsfds\"\r\n    },\r\n    \"TimezoneOffsetMin\": -300\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/users/{{USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{USER_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search with filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"User records are returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/users/search?phone=99",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"search"
							],
							"query": [
								{
									"key": "phone",
									"value": "99"
								},
								{
									"key": "email",
									"value": "xyz",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"User is deleted\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).equals(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/users/{{USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{USER_ID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Event",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"EVENT_ID\", jsonRes.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Event is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('UserId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('TenantId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Action');\r",
									"    pm.expect(jsonRes.Data).to.have.property('EventType');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UserId\": \"{{USER_ID}}\",\r\n    \"TenantId\": \"{{TENANT_ID}}\",\r\n    \"Action\": \"add-biometrics-blood-pressure\",\r\n    \"EventType\": \"biometrics\",\r\n    \"Timestamp\": \"2023-11-20T13:41:49.985Z\",\r\n    \"Attributes\": {\r\n        \"sample_attribute\": 3232\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/events",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Event is retrieved\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('UserId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('TenantId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Action');\r",
									"    pm.expect(jsonRes.Data).to.have.property('EventType');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/events/{{EVENT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"events",
								"{{EVENT_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search with filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Event records are returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/events/search?Action=add-biometrics-blood-pressure",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"events",
								"search"
							],
							"query": [
								{
									"key": "email",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "Action",
									"value": "add-biometrics-blood-pressure"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"User is deleted\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).equals(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/events/{{EVENT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"events",
								"{{EVENT_ID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Filters",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"FILTER_ID\", jsonRes.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Filter is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('OwnerId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('UserId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('TenantId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Filters');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"OwnerId\": \"a84e09b6-339a-4340-a9bd-9567a17200ef\",\r\n    \"TenantId\": \"{{TENANT_ID}}\",\r\n    \"UserId\": \"{{USER_ID}}\",\r\n    \"Name\": \"my-filter-b\",\r\n    \"Description\": \"This is a filter to find user engagement of users beyond 10 days.\",\r\n    \"Filters\": {\r\n        \"sample_attribute\": 3232\r\n    },\r\n    \"Frequency\" : \"Per-day\",\r\n    \"Duration\" : \"Last-week\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/filters",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"filters"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Filter is retrieved\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('OwnerId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('UserId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('TenantId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Filters');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/filters/{{FILTER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"filters",
								"{{FILTER_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Filter is updated\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('OwnerId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('UserId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('TenantId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Filters');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Name\": \"filter-z\",\r\n    \"Description\": \"This is a filter to find user engagement of users beyond 10 days.\",\r\n    \"Filters\": {\r\n        \"sample_attribute_1\": 3333,\r\n        \"sample_attribute_2\": \"dfdsfds\"\r\n    },\r\n    \"AnalysisType\": \"Active-users\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/filters/{{FILTER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"filters",
								"{{FILTER_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search with filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Filter records are returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/filters/search?Name=filter",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"filters",
								"search"
							],
							"query": [
								{
									"key": "Name",
									"value": "filter"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Filter is deleted\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).equals(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/filters/{{FILTER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"filters",
								"{{FILTER_ID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cohorts",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"COHORT_ID\", jsonRes.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Cohort is created\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('TenantId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Attributes');\r",
									"    \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"OwnerId\": \"a84e09b6-339a-4340-a9bd-9567a17200ef\",\r\n    \"TenantId\": \"{{TENANT_ID}}\",\r\n    \"Name\": \"my-cohort\",\r\n    \"Description\": \"This is a cohort segmented by my-filter.\",\r\n    \"Attributes\": {\r\n        \"sample_attribute\": 3232\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/cohorts",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"cohorts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Cohort is retrieved\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('TenantId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Attributes');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/cohorts/{{COHORT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"cohorts",
								"{{COHORT_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Cohort is updated\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('TenantId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Attributes');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Name\": \"my-cohort-x\",\r\n    \"Description\": \"This is a cohort.\",\r\n    \"Attributes\": {\r\n        \"sample_attribute_1\": 3333,\r\n        \"sample_attribute_2\": \"dfdsfds\"\r\n    }\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/cohorts/{{COHORT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"cohorts",
								"{{COHORT_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search with filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Cohort records are returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/cohorts/search?Name=my",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"cohorts",
								"search"
							],
							"query": [
								{
									"key": "Name",
									"value": "my"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('Success');\r",
									"});\r",
									"\r",
									"pm.test(\"Cohort is deleted\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).equals(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{USER_JWT}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/cohorts/{{COHORT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"cohorts",
								"{{COHORT_ID}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}